{
  "openapi": "3.0.2",
  "info": {
    "title": "EduCRM",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:3002"
    },
    {
      "url": "https://edu-crm-api-exp.onrender.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "GroupCourse": {
        "type": "object",
        "properties": {
          "academicArea": {
            "type": "string",
            "description": "The academic area of the course"
          },
          "topic": {
            "type": "string",
            "description": "The topic of the course"
          },
          "description": {
            "type": "string",
            "description": "The description of the course"
          },
          "syllabus": {
            "type": "string",
            "description": "The syllabus of the course"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of file paths related to the course"
          },
          "mentor": {
            "type": "string",
            "description": "The ID of the mentor associated with the course"
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of image paths for the course gallery"
          }
        }
      },
      "GroupClass": {
        "type": "object",
        "properties": {
          "groupCourse": {
            "type": "string",
            "description": "The ID of the group course associated with the group class"
          },
          "status": {
            "type": "string",
            "enum": [
              "not_started",
              "ongoing",
              "finished"
            ],
            "description": "The status of the group class"
          },
          "starting_date": {
            "type": "string",
            "format": "date",
            "description": "The starting date of the group class"
          },
          "finish_date": {
            "type": "string",
            "format": "date",
            "description": "The finish date of the group class"
          },
          "sessions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the group class sessions associated with the group class"
            },
            "description": "The sessions of the group class"
          },
          "students": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the student profiles enrolled in the group class"
            },
            "description": "The students enrolled in the group class"
          },
          "intake_gallery": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Links to images representing the intake gallery of the group class"
            },
            "description": "The intake gallery of the group class"
          },
          "testimonials": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the student testimonials associated with the group class"
            },
            "description": "The testimonials of the group class"
          },
          "price": {
            "type": "string",
            "description": "The price of the group class"
          }
        }
      },
      "Testimonial": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "default": "5.0"
          },
          "comment": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "student": {
            "type": "string"
          }
        }
      },
      "StudentProfile": {
        "type": "object",
        "properties": {
          "nameChinese": {
            "type": "string"
          },
          "nameEnglish": {
            "type": "string"
          },
          "profilePhoto": {
            "type": "string"
          },
          "studentContacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "owner": {
                  "type": "string",
                  "enum": [
                    "student"
                  ]
                },
                "contactService": {
                  "type": "string",
                  "description": "The ID of the contact service"
                },
                "contactValue": {
                  "type": "string",
                  "description": "The value of the contact information"
                }
              },
              "required": [
                "owner",
                "contactService",
                "contactValue"
              ]
            }
          },
          "parentContacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "owner": {
                  "type": "string",
                  "enum": [
                    "student"
                  ]
                },
                "contactService": {
                  "type": "string",
                  "description": "The ID of the contact service"
                },
                "contactValue": {
                  "type": "string",
                  "description": "The value of the contact information"
                }
              },
              "required": [
                "owner",
                "contactService",
                "contactValue"
              ]
            }
          },
          "school": {
            "type": "string"
          },
          "accountLogin": {
            "type": "string"
          },
          "accountEmail": {
            "type": "string"
          }
        }
      },
      "MentorProfile": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        }
      },
      "GroupClassSession": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "default": 0
          },
          "objective": {
            "type": "string"
          },
          "goal": {
            "type": "string"
          },
          "attendance": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "student": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": ["absent", "present", "excused"]
                }
              }
            }
          }
        }
      },
      "Blog": {
        "type": "object",
        "properties": {
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "coverPhoto": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "comments": {
            "type": "number"
          },
          "likes": {
            "type": "number"
          },
          "htmlContent": {
            "type": "string"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          }
        },
        "required": [
          "category"
        ]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "blog": {
            "type": "string",
            "description": "ID of the blog the comment belongs to"
          },
          "author": {
            "type": "string",
            "description": "ID of the user who authored the comment"
          },
          "text": {
            "type": "string",
            "description": "Text content of the comment"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the comment was created"
          }
        },
        "required": [
          "blog",
          "author",
          "text",
          "date"
        ]
      },
      "Like": {
        "type": "object",
        "properties": {
          "blog": {
            "type": "string",
            "description": "ID of the blog that was liked"
          },
          "author": {
            "type": "string",
            "description": "ID of the user who liked the blog"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the like was created"
          }
        }
      }
    }
  },
  "paths": {
    "/sign-up": {
      "post": {
        "tags": [
          "Public"
        ],
        "summary": "Operation registers either student or mentor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "mentor",
                      "student"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Admin(curator) cannot be registered"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Database errors"
          },
          "201": {
            "description": "Registered"
          }
        }
      }
    },
    "/sign-in": {
      "post": {
        "tags": [
          "Public"
        ],
        "summary": "Login, should return jwt token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Database errors"
          },
          "202": {
            "description": "Authorization"
          }
        }
      }
    },
    "/group_course": {
      "get": {
        "tags": [
          "Group Course"
        ],
        "summary": "Get all courses. Access: public",
        "responses": {
          "200": {
            "description": "List of all courses"
          }
        }
      }
    },
    "/group_course/{id}": {
      "get": {
        "tags": [
          "Group Course"
        ],
        "summary": "Get a group course by ID. Access: public",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the group course to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the group course"
          },
          "404": {
            "description": "Group course not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/academicAreas": {
      "get": {
        "tags": [
          "Academic Area"
        ],
        "responses": {
          "200": {
            "description": "List of all academic areas"
          }
        }
      }
    },
    "/admin": {
      "post": {
        "tags": [
          "Admin"
        ],
        "responses": {
          "201": {
            "description": "Curator registered"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Can't store user in database"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "responses": {
          "200": {
            "description": "Curator deleted"
          },
          "500": {
            "description": "Can't delete `curator` from database"
          }
        }
      }
    },
    "/admin/academicArea": {
      "post": {
        "tags": [
          "Academic Area"
        ],
        "responses": {
          "201": {
            "description": "Academic area was added"
          },
          "500": {
            "description": "Can't store `Academic Area` in database"
          }
        }
      },
      "delete": {
        "tags": [
          "Academic Area"
        ],
        "responses": {
          "200": {
            "description": "Academic area deleted"
          },
          "500": {
            "description": "Can't delete `academic area`"
          }
        }
      }
    },
    "/admin/classRequests": {
      "get": {
        "tags": [
          "OneToOne"
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/admin/classRequest": {
      "put": {
        "tags": [
          "OneToOne"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "type": "string",
                    "description": "The ID of the request to be updated."
                  },
                  "status": {
                    "type": "string",
                    "description": "The new status to be assigned to the request. Must be either 'approved' or 'declined'."
                  }
                },
                "required": [
                  "requestId",
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status of student's request changed"
          },
          "404": {
            "description": "Incorrect request ID"
          },
          "500": {
            "description": "Can't update request"
          }
        }
      }
    },
    "/student/request": {
      "post": {
        "tags": [
          "OneToOne"
        ],
        "summary": "Access:student.Request new one to one class",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "academicArea": {
                    "type": "string",
                    "description": "The academic area of the class."
                  },
                  "topic": {
                    "type": "string",
                    "description": "The topic of the class."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request creation"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "tags": [
          "Testimonial"
        ],
        "responses": {
          "200": {
            "description": "List of all reviews. Access: public"
          }
        }
      }
    },
    "/reviews/{id}": {
      "get": {
        "tags": [
          "Testimonial"
        ],
        "responses": {
          "200": {
            "description": "View one review by passing review id as path variable. Access: public"
          }
        }
      }
    },
    "/reviews/delete/{id}": {
      "delete": {
        "tags": [
          "Testimonial"
        ],
        "summary": "Access: private. Deletes one review by ID ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Review was deleted"
          },
          "500": {
            "description": "Database error deleting `Review`"
          }
        }
      }
    },
    "/student/reviews/new": {
      "post": {
        "tags": [
          "Testimonial"
        ],
        "summary": "Creates new review. Available to students.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Testimonial"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review was created"
          },
          "500": {
            "description": "Database error, while saving `Review`"
          }
        }
      }
    },
    "/student/reviews/edit": {
      "put": {
        "tags": [
          "Testimonial"
        ],
        "summary": "Edits existing review. Available to students.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Testimonial"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review was updated"
          },
          "400": {
            "description": "Review doesn't exist"
          }
        }
      }
    },
    "/admin/students": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "View all students",
        "responses": {
          "200": {
            "description": "Successfully got student profiles"
          },
          "404": {
            "description": "No Data"
          }
        }
      }
    },
    "/profile/student/{profileId}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "view one student profile by profile id",
        "parameters": [
          {
            "name": "profileId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got student profile"
          },
          "404": {
            "description": "No Data"
          }
        }
      }
    },
    "/student": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "create new student profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentProfile"
              }
            }
          }
        },
        "responses": {
          "500": {
            "description": "Can't save profile to database"
          },
          "201": {
            "description": "Successfully created profile"
          }
        }
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "update student profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudentProfile"
              }
            }
          }
        },
        "responses": {
          "500": {
            "description": "Profile doesn't exist"
          },
          "200": {
            "description": "Successfully updated profile"
          }
        }
      },
      "delete": {
        "tags": [
          "Profile"
        ],
        "summary": "Deletes profile by id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile was deleted"
          },
          "500": {
            "description": "Can't delete profile"
          }
        }
      }
    },
    "/contactServices": {
      "get": {
        "tags": [
          "Util"
        ],
        "summary": "Access: public. get all contact services: WeChat, Email, Telegram, etc.",
        "responses": {
          "200": {
            "description": "List of contact services"
          }
        }
      }
    },
    "/admin/contactServices": {
      "post": {
        "tags": [
          "Util"
        ],
        "summary": "create a new contact service. i.e., Instagram, Telegram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactService": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Database error, while saving `ContactService`"
          }
        }
      }
    },
    "/admin/contactServices/{id}": {
      "put": {
        "tags": [
          "Util"
        ],
        "summary": "edit existing contact service. i.e., fix a typo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the contact service to be edited"
          }],
  "requestBody": {
    "content": {
      "application/json": {
        "schema": {
          "type": "object",
          "properties": {
            "contactService": {
              "type": "string"
            }
          },
          "required": [
            "contactService"
          ]
        }
      }
    }
     },
        "responses": {
          "200": {
            "description": "ContactService was updated"
          },
          "400": {
            "description": "ContactService doesn't exist"
          }
        }
      },
      "delete": {
        "tags": [
          "Util"
        ],
        "summary": "delete a contact service by service id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ContactService was deleted"
          },
          "500": {
            "description": "Database error deleting `ContactService`"
          }
        }
      }
    },
    "/instructors": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "View all instructors. Access: private",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message regarding the operation"
                    },
                    "data": {
                      "type": "array",
                      "description": "Array of instructor profiles"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message indicating no data found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/instructor/{profileId}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "View one instructor profile by profile id",
        "parameters": [
          {
            "in": "path",
            "name": "profileId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the instructor profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "message": {
                      "type": "string",
                      "description": "A message regarding the operation"
                    },
                    "data": {
                      "description": "Instructor profile object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the request was successful"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message indicating no data found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/instructor": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Create a new instructor profile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MentorProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update instructor profile",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MentorProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Profile doesn't exist"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Profile"
        ],
        "summary": "Delete instructor profile",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "No profile"
          },
          "500": {
            "description": "Can't delete profile"
          }
        }
      }
    },
    "/student/requests": {
      "get": {
        "tags": [
          "OneToOne"
        ],
        "summary": "Access:student. Get one-to-one class requests",
        "description": "Endpoint for students to get their one-to-one class requests.",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/student/payments": {
      "get": {
        "tags": [
          "OneToOne"
        ],
        "summary": "Access:student. Get payment requests",
        "description": "Endpoint for students to get their payment requests.",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/student/submit": {
      "put": {
        "tags": [
          "OneToOne"
        ],
        "summary": "Submit proof for payment",
        "description": "Endpoint for submitting proof of payment.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paymentId": {
                    "type": "string",
                    "description": "The ID of the payment request to update."
                  },
                  "photoLink": {
                    "type": "string",
                    "description": "The link to the proof of payment photo."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Link updated successfully"
          },
          "404": {
            "description": "Data not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/admin/payment": {
      "post": {
        "tags": [
          "OneToOne"
        ],
        "summary": "Request payment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "student": {
                    "type": "string",
                    "description": "The ID of the student making the payment request."
                  },
                  "request": {
                    "type": "string",
                    "description": "The ID of the one-to-one request for which payment is being requested."
                  }
                },
                "required": [
                  "student",
                  "request"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment request saved"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Request is not approved"
          },
          "404": {
            "description": "Class request lost"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/student/group": {
      "post": {
        "tags": [
          "Group Course"
        ],
        "summary": "Creates a new student request for a course",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "student": {
                    "type": "string",
                    "format": "Student.Id"
                  },
                  "course": {
                    "type": "string",
                    "format": "Course.Id"
                  },
                  "status": {
                    "type": "string",
                    "default": "waiting",
                    "enum": [
                      "waiting",
                      "approved",
                      "declined"
                    ]
                  },
                  "requestDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Database error, while saving `StudentRequest`"
          }
        }
      }
    },
    "/student/group/delete/{id}": {
      "delete": {
        "tags": [
          "Group Course"
        ],
        "summary": "Deletes one request by request id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "StudentRequest deleted"
          },
          "500": {
            "description": "Database error deleting `StudentRequest`"
          }
        }
      }
    },
    "/admin/group_course/{id}": {
      "delete": {
        "tags": [
          "Group Course"
        ],
        "summary": "Delete a group course.Access: admin",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group course to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Group course successfully deleted"
          },
          "500": {
            "description": "Database error"
          }
        }
      },
      "put": {
        "tags": [
          "Group Course"
        ],
        "summary": "Edit an existing group course. Access: admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the group course to edit"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCourse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group course updated successfully"
          },
          "400": {
            "description": "Group course not found"
          }
        }
      }
    },
    "/admin/group_class/{id}": {
      "delete": {
        "tags": [
          "Group Course"
        ],
        "summary": "Delete a group class. Access: admin",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group class to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Group class successfully deleted"
          },
          "500": {
            "description": "Database error"
          }
        }
      },
      "put": {
        "tags": ["Group Course"],
        "summary": "Update a group class by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group class to update"
          },
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "GroupClass updated successfully"
          },
          "400": {
            "description": "GroupClass not found"
          }
        }
      },
      "get": {
        "tags": ["Group Course"],
        "summary": "Get group class by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group class to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved group class."
          },
          "404": {
            "description": "Group class not found."
          }
        }
      }
    },
    "/admin/group_session/{id}": {
      "delete": {
        "tags": [
          "Group Course"
        ],
        "summary": "Delete a group session.Access: admin",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the group session to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Group session successfully deleted"
          },
          "500": {
            "description": "Database error"
          }
        }
      },
      "put": {
        "tags": ["Group Course"],
        "summary": "Update an existing group class session",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group class session to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClassSession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group class session updated successfully"
          },
          "400": {
            "description": "GroupClassSession doesn't exist"
          }
        }
      },
      "get": {
        "tags": ["Group Course"],
        "summary": "Get group session by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group session to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved group session."
          },
          "403": {
            "description": "You are not authorized to access this group session."
          },
          "404": {
            "description": "Group session not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/admin/group_course": {
      "post": {
        "tags": [
          "Group Course"
        ],
        "summary": "Create a new group course. Access: admin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCourse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Group course created successfully"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/instructor/group_course": {
      "post": {
        "tags": [
          "Group Course"
        ],
        "summary": "Create a new group course. Access: mentor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCourse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Group course created successfully"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/instructor/group_course/{id}": {
      "put": {
        "tags": [
          "Group Course"
        ],
        "summary": "Edit an existing group course. Access: mentor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the group course to edit"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCourse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group course updated successfully"
          },
          "400": {
            "description": "Group course not found"
          }
        }
      }
    },
    "/admin/group_class": {
      "post": {
        "tags": [
          "Group Class"
        ],
        "summary": "Create a new group class.Access: admin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClass"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Group class created successfully"
          },
          "500": {
            "description": "Database error"
          }
        }
      },
      "get": {
        "tags": [
          "Group Course"
        ],
        "summary": "Get all group classes",
        "responses": {
          "200": {
            "description": "Success. Retrieved group classes."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/instructor/group_class": {
      "post": {
        "tags": [
          "Group Class"
        ],
        "summary": "Create a new group class. Access: instructor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClass"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Group class created successfully"
          },
          "500": {
            "description": "Database error"
          }
        }
      },
      "get": {
        "tags": ["Group Course"],
        "summary": "Get all group classes",
        "responses": {
          "200": {
            "description": "Success. Retrieved group classes."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/instructor/group_class/{id}": {
      "put": {
        "tags": ["Group Course"],
        "summary": "Update a group class by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group class to update"
          },
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClass"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "GroupClass updated successfully"
          },
          "400": {
            "description": "GroupClass not found"
          }
        }
      },
      "get": {
        "tags": ["Group Course"],
        "summary": "Get group class by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group class to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved group class."
          },
          "404": {
            "description": "Group class not found."
          }
        }
      }
    },
    "/admin/group_session": {
      "post": {
        "tags": ["Group Course"],
        "summary": "Create a new group class session",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClassSession"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group class session created successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Group Course"],
        "summary": "Get all group sessions",
        "responses": {
          "200": {
            "description": "Success. Retrieved group sessions."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/instructor/group_session": {
      "post": {
        "tags": ["Group Course"],
        "summary": "Create a new group class session",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClassSession"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group class session created successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": ["Group Course"],
        "summary": "Get all group sessions",
        "responses": {
          "200": {
            "description": "Success. Retrieved group sessions."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/instructor/group_session/{id}": {
      "put": {
        "tags": ["Group Course"],
        "summary": "Update an existing group class session",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group class session to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupClassSession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group class session updated successfully"
          },
          "400": {
            "description": "GroupClassSession doesn't exist"
          }
        }
      },
      "get": {
        "tags": ["Group Course"],
        "summary": "Get group session by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group session to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved group session."
          },
          "403": {
            "description": "You are not authorized to access this group session."
          },
          "404": {
            "description": "Group session not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/student/group_class": {
      "get": {
        "tags": ["Group Course"],
        "summary": "Get all group classes",
        "responses": {
          "200": {
            "description": "Success. Retrieved group classes."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/student/group_session": {
      "get": {
        "tags": ["Group Course"],
        "summary": "Get all group sessions",
        "responses": {
          "200": {
            "description": "Success. Retrieved group sessions."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/student/group_session/{id}": {
      "get": {
        "tags": ["Group Course"],
        "summary": "Get group session by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group session to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved group session."
          },
          "403": {
            "description": "You are not authorized to access this group session."
          },
          "404": {
            "description": "Group session not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
},
    "/student/group_class/{id}": {
      "get": {
        "tags": ["Group Course"],
        "summary": "Get group class by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the group class to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved group class."
          },
          "404": {
            "description": "Group class not found."
          }
        }
      }
    },
    "/admin/group": {
      "get": {
        "tags": ["Group Course"],
        "summary": "Get all student requests for group courses",
        "responses": {
          "200": {
            "description": "Success. Retrieved student requests for group courses."
          }
        }
      }
    },
    "/admin/group/{studentId}": {
      "get": {
        "tags": ["Group Course"],
        "summary": "Get student requests for group courses by student ID",
        "parameters": [
          {
            "in": "path",
            "name": "studentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the student"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved student requests for group courses by student ID."
          }
        }
      }
    },
    "/student/group/{studentId}": {
      "get": {
        "tags": ["Group Course"],
        "summary": "Get student requests for group courses by student ID",
        "parameters": [
          {
            "in": "path",
            "name": "studentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the student"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved student requests for group courses by student ID."
          }
        }
      }
    },
    "/blogs": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get active blogs",
        "responses": {
          "200": {
            "description": "Success. Retrieved active blogs."
          }
        }
      }
    },
    "/blogs/{category}": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get blogs by category",
        "parameters": [
          {
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The category of the blogs"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved blogs by category."
          }
        }
      }
    },
    "/blogs/{id}": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get blog by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the blog"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved blog by ID."
          }
        }
      }
    },
    "/blogs/categories": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get all blog categories",
        "responses": {
          "200": {
            "description": "Success. Retrieved all blog categories."
          }
        }
      }
    },
    "/blogs/category/{id}": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get a specific blog category by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the blog category"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved the specified blog category."
          }
        }
      }
    },
    "/blogs/{blog}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Get comments for a specific blog",
        "parameters": [
          {
            "in": "path",
            "name": "blog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the blog"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved comments for the specified blog."
          }
        }
      }
    },
    "/blogs/comment/{id}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Get a specific comment by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Retrieved the specified comment."
          }
        }
      }
    },
    "/blogs/likes": {
      "get": {
        "tags": [
          "Like"
        ],
        "summary": "Get all likes for a blog post",
        "responses": {
          "200": {
            "description": "Success. Retrieved all likes for the specified blog post."
          }
        }
      }
    },
    "/blog": {
      "get": {
        "tags": [
          "Blogs"
        ],
        "summary": "Get all blogs",
        "responses": {
          "200": {
            "description": "Success. Retrieved all blogs."
          }
        }
      },
      "post": {
        "tags": [
          "Blogs"
        ],
        "summary": "Create a new blog",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. Blog created."
          },
          "500": {
            "description": "Database error. Blog creation failed."
          }
        }
      }
    },
    "/blog/{id}": {
      "delete": {
        "tags": [
          "Blogs"
        ],
        "summary": "Delete a blog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the blog to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Blog deleted."
          },
          "500": {
            "description": "Database error. Blog deletion failed."
          }
        }
      },
      "put": {
        "tags": [
          "Blogs"
        ],
        "summary": "Edit a blog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "ID of the blog to edit"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success. Blog updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog"
                }
              }
            }
          },
          "400": {
            "description": "Blog doesn't exist."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/blog/category": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. Category created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "500": {
            "description": "Database error, while saving `Category`."
          }
        }
      }
    },
    "/blog/category/{id}": {
      "delete": {
        "summary": "Delete a category",
        "tags": [
          "Category"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the category to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "500": {
            "description": "Database error deleting Category"
          }
        }
      },
      "put": {
        "summary": "Update a category",
        "tags": [
          "Category"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the category to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Category updated successfully"
          },
          "400": {
            "description": "Category doesn't exist"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blog/in/bookmark": {
      "get": {
        "summary": "Get bookmarks",
        "tags": [
          "Bookmark"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmarks retrieved successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new bookmark",
        "tags": [
          "Bookmark"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "blog": {
                    "type": "string",
                    "description": "ID of the blog to bookmark"
                  }
                },
                "required": [
                  "blog"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Bookmark created successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blog/in/bookmark/{id}": {
      "delete": {
        "summary": "Delete a bookmark by ID",
        "tags": [
          "Bookmark"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the bookmark to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Bookmark deleted successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blog/in/comment": {
      "post": {
        "summary": "Create a new comment",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created successfully"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blog/in/comment/{id}": {
      "delete": {
        "summary": "Delete a comment by ID",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the comment to delete"
          },
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "403": {
            "description": "Unauthorized: User is not the author of the comment"
          },
          "404": {
            "description": "Comment not found"
          },
          "500": {
            "description": "Database error deleting `Comment`"
          }
        }
      },
      "put": {
        "summary": "Update a comment by ID",
        "tags": [
          "Comment"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the comment to update"
          },
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "400": {
            "description": "Comment doesn't exist"
          },
          "403": {
            "description": "You are not authorized to edit this comment"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/blog/in/like": {
      "post": {
        "summary": "Create a like",
        "tags": [
          "Like"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Like"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Like created successfully"
          },
          "500": {
            "description": "Database error, while saving `Like`"
          }
        }
      }
    },
    "/blog/in/like/{id}": {
      "delete": {
        "summary": "Delete a like",
        "tags": [
          "Like"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization token"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the like to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Like deleted successfully"
          },
          "403": {
            "description": "Unauthorized: User did not like this item"
          },
          "404": {
            "description": "Like not found"
          },
          "500": {
            "description": "Database error deleting `Like`"
          }
        }
      }
    },
    "/admin/blog_admin": {
      "post": {
        "summary": "Add news admin",
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email of the news admin"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response. The news admin is registered."
          },
          "409": {
            "description": "Conflict response. The user already exists."
          },
          "500": {
            "description": "Internal server error. Can't store user in database."
          }
        }
      },
      "delete": {
        "summary": "Delete news admin",
        "tags": [
          "Admin"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "ID of the news admin"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email of the news admin"
                  }
                },
                "required": [
                  "id",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response. The news admin is deleted."
          },
          "500": {
            "description": "Internal server error. Can't delete news admin from database."
          }
        }
      }
    }
  }
}


